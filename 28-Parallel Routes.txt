Parallel Routes

Parallel routes are an advanced routing mechanism that allows for the simultaneous rendering of multiple pages within the same layout.
- within the app folder create a complex-dasboard folder.
- create a page.tsx file inside complex-dashboard.
- children is page.tsx


- parallel routes in Next.js are defined using a feature known as slots.
- slots help structure our content in a modular fashion
- to define a slot, we use the `@folder` naming convention.
- each slot is  then passed as a prop to its corresponding `layout.tsx` file.
- create @notifications folder inside complex-dashboard. within the folder create a page.tsx file.
- create @revenue folder inside complex-dashboard. within the folder create a page.tsx file.
- create @users folder inside complex-dashboard. within the folder create page.tsx file.
- remove the 3 imports from the layout.tsx.
- children , revenue,user prop in layout.jsx.
- in src folder create a  components folder.and create a card.tsx file.
- in notification , revenue , user all folder chnage div in to card.
- slots are not route segments and do not affect the URL STRUCTURE. http://localhost:3001/complex-dashboard
- children prop is equivalent to complex-dashboard/@children/page.tsx

Parallel Routes Benefits 

- A clear Benefit of parallel routes is their ability to split a single layout into various slots,making the code more manageable.
- Independent route handling
- Sub-navigation


Independent Route handling

- Each slot of your layout, such as user analytics or revenue metrics, can have its own loading and error states.
- This granular control is particularly beneficial in scenarios where different sections of the page load at varying speeds or encounter unique errors.
- If the user analytics data takes longer to load you can display a loading spinner specifically for that section.
  while other parts of the dashboard remain interactive similarly if there is an error in fetching revenue metrics.
  you can show an error message in that specific section without affecting the rest of the dashboard.this level of detail in handling States not only 
  improves the user experience, but but also simplifies debugging and maintainance.



 Sub-navigation in routes 

 - Each slot of your dashboard can essentially function as a mini-applications,
   complete with its own navigation and state management.

 - This is especially useful in a complex applications such as our dashboard where different sections serve distinct purposes.
